#!/usr/bin/env julia

using Pkg
Pkg.activate(".")

using CSV, DataFrames, Statistics, Random
import StatsBase
Random.seed!(42)

include("src/PrepaymentModels.jl")
using .PrepaymentModels

println("üìä COVARI√ÅVEIS UTILIZADAS NOS MODELOS DE SOBREVIV√äNCIA")
println(repeat("=", 70))

# Load sample data
filepath = "data/official_based_data/brazilian_loans_2025-07-23_20-16.csv"
raw_data = CSV.read(filepath, DataFrame)
sample_df = raw_data[1:100, :]

function create_loan_data(df::DataFrame)
    return PrepaymentModels.LoanData(
        String.(df.loan_id),
        df.origination_date,
        df.maturity_date,
        df.interest_rate,
        df.loan_amount,
        df.loan_term,
        df.credit_score,
        df.borrower_income,
        df.loan_type,
        df.collateral_type,
        df.prepayment_date,
        fill(missing, nrow(df)),
        DataFrame()
    )
end

loan_data = create_loan_data(sample_df)

# Current covariates in use
println("üéØ COVARI√ÅVEIS ATUALMENTE EM USO:")
current_covariates = [
    :interest_rate,
    :loan_amount_log,
    :loan_term,
    :dti_ratio,
    :borrower_income_log,
    :has_collateral
]

for (i, var) in enumerate(current_covariates)
    println("  $i. $var")
end
println("  TOTAL: $(length(current_covariates)) covari√°veis")

# Create survival data to see what gets generated
survival_df = PrepaymentModels._prepare_survival_data(loan_data, current_covariates)

println("\nüìã DETALHAMENTO DAS COVARI√ÅVEIS:")
println(repeat("-", 70))

# Basic covariates with transformations
println("üè¶ VARI√ÅVEIS DE EMPR√âSTIMO:")
println("  ‚úÖ interest_rate")
println("     - Descri√ß√£o: Taxa de juros anual (%)")
println("     - Transforma√ß√£o: Normalizada (z-score)")
println("     - Range original: $(round(minimum(sample_df.interest_rate), digits=2)) - $(round(maximum(sample_df.interest_rate), digits=2))%")
println("     - Range transformado: $(round(minimum(survival_df.interest_rate), digits=4)) - $(round(maximum(survival_df.interest_rate), digits=4))")

println("\n  ‚úÖ loan_amount_log")
println("     - Descri√ß√£o: Valor do empr√©stimo")
println("     - Transforma√ß√£o: Logaritmo natural")
println("     - Range original: R\$ $(Int(minimum(sample_df.loan_amount))) - R\$ $(Int(maximum(sample_df.loan_amount)))")
println("     - Range transformado: $(round(minimum(survival_df.loan_amount_log), digits=4)) - $(round(maximum(survival_df.loan_amount_log), digits=4))")

println("\n  ‚úÖ loan_term")
println("     - Descri√ß√£o: Prazo do empr√©stimo (meses)")
println("     - Transforma√ß√£o: Nenhuma (Float64)")
println("     - Range: $(Int(minimum(sample_df.loan_term))) - $(Int(maximum(sample_df.loan_term))) meses")

println("\nüë§ VARI√ÅVEIS DO MUTU√ÅRIO:")
println("  ‚úÖ borrower_income_log")
println("     - Descri√ß√£o: Renda mensal do mutu√°rio")
println("     - Transforma√ß√£o: Logaritmo natural")
println("     - Range original: R\$ $(Int(minimum(sample_df.borrower_income))) - R\$ $(Int(maximum(sample_df.borrower_income)))")
println("     - Range transformado: $(round(minimum(survival_df.borrower_income_log), digits=4)) - $(round(maximum(survival_df.borrower_income_log), digits=4))")

println("\n  ‚úÖ dti_ratio")
println("     - Descri√ß√£o: Debt-to-Income ratio (Presta√ß√£o/Renda anual)")
println("     - Transforma√ß√£o: Calculado (payment * 12 / income)")
println("     - Range: $(round(minimum(survival_df.dti_ratio), digits=4)) - $(round(maximum(survival_df.dti_ratio), digits=4))")

println("\nüõ°Ô∏è  VARI√ÅVEIS DE GARANTIA:")
println("  ‚úÖ has_collateral")
println("     - Descri√ß√£o: Indica se o empr√©stimo tem garantia")
println("     - Transforma√ß√£o: Dummy (1 = Com Garantia, 0 = Sem Garantia)")
println("     - Distribui√ß√£o: $(sum(survival_df.has_collateral)) com garantia / $(nrow(survival_df)) total ($(round(mean(survival_df.has_collateral)*100, digits=1))%)")

# Check loan type dummies that are automatically added
println("\nüè∑Ô∏è  VARI√ÅVEIS DUMMY DE TIPO DE EMPR√âSTIMO (adicionadas automaticamente):")
loan_types = unique(sample_df.loan_type)
for loan_type in loan_types
    safe_name = Symbol(replace(loan_type, " " => "_"))
    if safe_name in names(survival_df)
        count_type = sum(survival_df[!, safe_name])
        percentage = round(count_type / nrow(survival_df) * 100, digits=1)
        println("  ‚úÖ $safe_name")
        println("     - Descri√ß√£o: Dummy para '$loan_type'")
        println("     - Distribui√ß√£o: $count_type / $(nrow(survival_df)) ($percentage%)")
    end
end

println("\n‚ùå VARI√ÅVEL REMOVIDA:")
println("  ‚ùå credit_score")
println("     - Descri√ß√£o: Score de cr√©dito (300-1000)")
println("     - Motivo da remo√ß√£o: Coeficientes extremos (>10) causando predi√ß√µes uniformes")
println("     - Transforma√ß√£o original: Normalizada (z-score)")
println("     - Range original: $(Int(minimum(sample_df.credit_score))) - $(Int(maximum(sample_df.credit_score)))")
println("     - Status: TEMPORARIAMENTE REMOVIDO - precisa normaliza√ß√£o robusta")

println("\nüìä RESUMO FINAL:")
println("  ‚Ä¢ Covari√°veis num√©ricas: 5 (interest_rate, loan_amount_log, loan_term, dti_ratio, borrower_income_log)")
println("  ‚Ä¢ Covari√°veis bin√°rias: 1 + $(length(loan_types)) (has_collateral + loan_type_dummies)")
println("  ‚Ä¢ Total efetivo: $(ncol(survival_df) - 3) (excluindo loan_id, time, event)")
println("  ‚Ä¢ Transforma√ß√µes: 3 log, 1 normalizada, 1 calculada, $(1 + length(loan_types)) dummies")

println("\n" * repeat("=", 70))